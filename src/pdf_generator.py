"""
Generador de PDFs profesionales con branding Andru.ia
Autor: Rub√©n Mauricio Toca√≠n Garz√≥n
"""

import pandas as pd
from datetime import datetime
from io import BytesIO
import logging

# ReportLab imports
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.units import inch, cm
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle,
    PageBreak, Image, KeepTogether
)
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

# Importar nuestros estilos personalizados
from .pdf_styles import (
    AndruColors, AndruFonts, AndruTableStyles, AndruPageConfig,
    get_andru_styles, get_status_color, get_bloom_color, AndruSymbols
)

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AndruPDFGenerator:
    """Generador principal de PDFs con branding Andru.ia"""
    
    def __init__(self):
        self.styles = get_andru_styles()
        self.page_width = A4[0]
        self.page_height = A4[1]
        
    def _create_header(self):
        """Crea el encabezado corporativo Andru.ia"""
        header_data = [
            [Paragraph("ü§ñ <b>Andru.ia</b> - Inteligencia Artificial para Educaci√≥n", self.styles['AndruTitle'])],
            [Paragraph("An√°lisis Inteligente de Resultados de Aprendizaje", self.styles['AndruSubtitle'])],
            [Paragraph("Taxonom√≠a de Bloom ‚Ä¢ Verificabilidad ‚Ä¢ Correcci√≥n ‚Ä¢ Autenticidad", self.styles['AndruBody'])],
            [Paragraph(f"Generado el: {datetime.now().strftime('%d/%m/%Y a las %H:%M')}", self.styles['AndruSmall'])]
        ]
        
        header_table = Table(header_data, colWidths=[self.page_width - 4*cm])
        header_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('BACKGROUND', (0, 0), (-1, 0), AndruColors.PRIMARY),
            ('TEXTCOLOR', (0, 0), (-1, 0), AndruColors.WHITE),
            ('BACKGROUND', (0, 1), (-1, -1), AndruColors.NEUTRAL_LIGHT),
        ]))
        
        return header_table
    
    def _create_footer(self):
        """Crea el pie de p√°gina corporativo"""
        footer_data = [
            ["Generado por Andru.ia - Inteligencia Artificial para Educaci√≥n Superior"],
            ["Herramienta de An√°lisis RdA v2.0"],
            ["Desarrollado por: Rub√©n Mauricio Toca√≠n Garz√≥n"],
            ["Contacto: info@andru.ia"]
        ]
        
        footer_table = Table(footer_data, colWidths=[self.page_width - 4*cm])
        footer_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, -1), AndruFonts.PRIMARY_FONT),
            ('FONTSIZE', (0, 0), (-1, -1), AndruFonts.FOOTER_SIZE),
            ('TEXTCOLOR', (0, 0), (-1, -1), AndruColors.NEUTRAL_DARK),
            ('TOPPADDING', (0, 0), (-1, -1), 4),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
        ]))
        
        return footer_table
    
    def _create_metrics_summary(self, df):
        """Crea resumen de m√©tricas clave"""
        total_ras = len(df)
        
        # Contar adecuaci√≥n
        apropiados = len(df[df['Adecuaci√≥n T.'].str.contains('Apropiado', na=False)])
        pot_bajo = len(df[df['Adecuaci√≥n T.'].str.contains('Pot. Bajo', na=False)])
        pot_alto = len(df[df['Adecuaci√≥n T.'].str.contains('Pot. Alto', na=False)])
        
        # Nivel Bloom predominante
        bloom_counts = df['Nivel Bloom'].value_counts()
        bloom_predominante = bloom_counts.index[0] if len(bloom_counts) > 0 else "N/A"
        
        # Verificabilidad promedio
        verificabilidad_nums = df['Verificabilidad'].str.replace('%', '').astype(float, errors='ignore')
        verificabilidad_prom = verificabilidad_nums.mean() if len(verificabilidad_nums) > 0 else 0
        
        metrics_data = [
            ["M√©trica", "Valor", "Descripci√≥n"],
            [f"{AndruSymbols.TOTAL} Total RdAs", str(total_ras), "Resultados de Aprendizaje analizados"],
            [f"{AndruSymbols.APROPIADO} Apropiados", f"{apropiados} ({apropiados/total_ras*100:.1f}%)", "RdAs con adecuaci√≥n apropiada"],
            [f"{AndruSymbols.POTENCIAL_BAJO} Pot. Bajo", f"{pot_bajo} ({pot_bajo/total_ras*100:.1f}%)", "RdAs con potencial bajo"],
            [f"{AndruSymbols.POTENCIAL_ALTO} Pot. Alto", f"{pot_alto} ({pot_alto/total_ras*100:.1f}%)", "RdAs con potencial alto"],
            [f"{AndruSymbols.BLOOM} Bloom Predominante", bloom_predominante.title(), "Nivel cognitivo m√°s frecuente"],
            [f"{AndruSymbols.VERIFICABILIDAD} Verificabilidad", f"{verificabilidad_prom:.1f}%", "Promedio de verificabilidad"],
        ]
        
        metrics_table = Table(metrics_data, colWidths=[4*cm, 3*cm, 8*cm])
        metrics_table.setStyle(AndruTableStyles.get_alternating_rows_style(len(metrics_data)))
        
        return metrics_table
    
    def _create_detailed_table(self, df):
        """Crea tabla detallada de an√°lisis"""
        # Preparar datos para la tabla
        table_data = [["RA", "Nivel", "Verbo", "Bloom", "Adecuaci√≥n", "Verif.", "Corr.", "Aut."]]
        
        for _, row in df.iterrows():
            table_data.append([
                str(row['RA']),
                str(row['Nivel Acad√©mico']),
                str(row['Verbo Principal'])[:15] + "..." if len(str(row['Verbo Principal'])) > 15 else str(row['Verbo Principal']),
                str(row['Nivel Bloom']).title(),
                str(row['Adecuaci√≥n T.']),
                str(row['Verificabilidad']),
                str(row['Correcci√≥n']),
                f"{row['Autenticidad']:.1f}" if pd.notna(row['Autenticidad']) else "N/A"
            ])
        
        # Crear tabla
        detailed_table = Table(table_data, colWidths=[1*cm, 1*cm, 3*cm, 2*cm, 2.5*cm, 1.5*cm, 1*cm, 1*cm])
        detailed_table.setStyle(AndruTableStyles.get_alternating_rows_style(len(table_data)))
        
        return detailed_table
    
    def _create_bloom_distribution(self, df):
        """Crea tabla de distribuci√≥n de niveles Bloom"""
        bloom_counts = df['Nivel Bloom'].value_counts()
        total = len(df)
        
        bloom_data = [["Nivel Bloom", "Cantidad", "Porcentaje", "Descripci√≥n"]]
        
        bloom_descriptions = {
            'recordar': 'Recuperar informaci√≥n de la memoria',
            'comprender': 'Construir significado a partir de mensajes',
            'aplicar': 'Usar procedimientos en situaciones dadas',
            'analizar': 'Descomponer en partes y determinar relaciones',
            'evaluar': 'Hacer juicios basados en criterios',
            'crear': 'Reorganizar elementos en un patr√≥n nuevo'
        }
        
        for nivel, count in bloom_counts.items():
            percentage = (count / total) * 100
            description = bloom_descriptions.get(nivel.lower(), "Descripci√≥n no disponible")
            bloom_data.append([
                nivel.title(),
                str(count),
                f"{percentage:.1f}%",
                description
            ])
        
        bloom_table = Table(bloom_data, colWidths=[2.5*cm, 2*cm, 2*cm, 8.5*cm])
        bloom_table.setStyle(AndruTableStyles.get_alternating_rows_style(len(bloom_data)))
        
        return bloom_table
    
    def _create_recommendations(self, df):
        """Crea secci√≥n de recomendaciones inteligentes"""
        recommendations = []
        
        # An√°lisis de adecuaci√≥n
        total = len(df)
        apropiados = len(df[df['Adecuaci√≥n T.'].str.contains('Apropiado', na=False)])
        pot_bajo = len(df[df['Adecuaci√≥n T.'].str.contains('Pot. Bajo', na=False)])
        pot_alto = len(df[df['Adecuaci√≥n T.'].str.contains('Pot. Alto', na=False)])
        
        if apropiados / total < 0.7:
            recommendations.append("‚Ä¢ Revisar la formulaci√≥n de RdAs para mejorar la adecuaci√≥n taxon√≥mica")
        
        if pot_bajo > 0:
            recommendations.append(f"‚Ä¢ {pot_bajo} RdAs tienen potencial bajo - considerar elevar el nivel cognitivo")
        
        if pot_alto > 0:
            recommendations.append(f"‚Ä¢ {pot_alto} RdAs tienen potencial alto - verificar si es apropiado para el nivel")
        
        # An√°lisis de diversidad Bloom
        bloom_diversity = len(df['Nivel Bloom'].unique())
        if bloom_diversity < 3:
            recommendations.append("‚Ä¢ Considerar incorporar mayor diversidad de niveles cognitivos de Bloom")
        
        # An√°lisis de verificabilidad
        verificabilidad_nums = df['Verificabilidad'].str.replace('%', '').astype(float, errors='ignore')
        verificabilidad_prom = verificabilidad_nums.mean() if len(verificabilidad_nums) > 0 else 0
        
        if verificabilidad_prom < 80:
            recommendations.append("‚Ä¢ Mejorar la verificabilidad usando verbos m√°s espec√≠ficos y medibles")
        
        if not recommendations:
            recommendations.append("‚Ä¢ ¬°Excelente! Los RdAs muestran una formulaci√≥n adecuada")
        
        return recommendations
    
    def generate_detailed_pdf(self, df):
        """Genera PDF detallado con an√°lisis completo"""
        try:
            buffer = BytesIO()
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=AndruPageConfig.MARGIN_RIGHT,
                leftMargin=AndruPageConfig.MARGIN_LEFT,
                topMargin=AndruPageConfig.MARGIN_TOP,
                bottomMargin=AndruPageConfig.MARGIN_BOTTOM
            )
            
            # Construir contenido
            story = []
            
            # Encabezado
            story.append(self._create_header())
            story.append(Spacer(1, 20))
            
            # T√≠tulo del reporte
            story.append(Paragraph("üìÑ Reporte Detallado de An√°lisis", self.styles['AndruTitle']))
            story.append(Spacer(1, 15))
            
            # Resumen de m√©tricas
            story.append(Paragraph("üìä Resumen de M√©tricas", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            story.append(self._create_metrics_summary(df))
            story.append(Spacer(1, 20))
            
            # Tabla detallada
            story.append(Paragraph("üìã An√°lisis Detallado por RdA", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            story.append(self._create_detailed_table(df))
            story.append(Spacer(1, 20))
            
            # Distribuci√≥n Bloom
            story.append(Paragraph("üß† Distribuci√≥n de Niveles Bloom", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            story.append(self._create_bloom_distribution(df))
            story.append(Spacer(1, 20))
            
            # Recomendaciones
            story.append(Paragraph("üí° Recomendaciones Inteligentes", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            recommendations = self._create_recommendations(df)
            for rec in recommendations:
                story.append(Paragraph(rec, self.styles['AndruBody']))
                story.append(Spacer(1, 5))
            
            story.append(Spacer(1, 30))
            story.append(self._create_footer())
            
            # Generar PDF
            doc.build(story)
            buffer.seek(0)
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Error generando PDF detallado: {e}")
            raise
    
    def generate_executive_pdf(self, df):
        """Genera PDF ejecutivo con resumen gerencial"""
        try:
            buffer = BytesIO()
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=AndruPageConfig.MARGIN_RIGHT,
                leftMargin=AndruPageConfig.MARGIN_LEFT,
                topMargin=AndruPageConfig.MARGIN_TOP,
                bottomMargin=AndruPageConfig.MARGIN_BOTTOM
            )
            
            story = []
            
            # Encabezado
            story.append(self._create_header())
            story.append(Spacer(1, 20))
            
            # T√≠tulo del reporte
            story.append(Paragraph("üìä Reporte Ejecutivo", self.styles['AndruTitle']))
            story.append(Spacer(1, 15))
            
            # Resumen ejecutivo
            story.append(Paragraph("üéØ Resumen Ejecutivo", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            
            total = len(df)
            apropiados = len(df[df['Adecuaci√≥n T.'].str.contains('Apropiado', na=False)])
            
            executive_summary = f"""
            Se analizaron <b>{total}</b> Resultados de Aprendizaje utilizando inteligencia artificial.
            El <b>{apropiados/total*100:.1f}%</b> de los RdAs muestran adecuaci√≥n apropiada seg√∫n la Taxonom√≠a de Bloom.
            """
            
            story.append(Paragraph(executive_summary, self.styles['AndruBody']))
            story.append(Spacer(1, 15))
            
            # M√©tricas clave
            story.append(self._create_metrics_summary(df))
            story.append(Spacer(1, 20))
            
            # Distribuci√≥n Bloom
            story.append(Paragraph("üß† Distribuci√≥n Cognitiva", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            story.append(self._create_bloom_distribution(df))
            story.append(Spacer(1, 20))
            
            # Recomendaciones estrat√©gicas
            story.append(Paragraph("üöÄ Recomendaciones Estrat√©gicas", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            recommendations = self._create_recommendations(df)
            for rec in recommendations:
                story.append(Paragraph(rec, self.styles['AndruBody']))
                story.append(Spacer(1, 5))
            
            story.append(Spacer(1, 30))
            story.append(self._create_footer())
            
            doc.build(story)
            buffer.seek(0)
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Error generando PDF ejecutivo: {e}")
            raise
    
    def generate_level_pdf(self, df, level):
        """Genera PDF filtrado por nivel acad√©mico"""
        try:
            # Filtrar por nivel
            df_filtered = df[df['Nivel Acad√©mico'] == level].copy()
            
            if len(df_filtered) == 0:
                raise ValueError(f"No se encontraron RdAs para el nivel {level}")
            
            buffer = BytesIO()
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=AndruPageConfig.MARGIN_RIGHT,
                leftMargin=AndruPageConfig.MARGIN_LEFT,
                topMargin=AndruPageConfig.MARGIN_TOP,
                bottomMargin=AndruPageConfig.MARGIN_BOTTOM
            )
            
            story = []
            
            # Encabezado
            story.append(self._create_header())
            story.append(Spacer(1, 20))
            
            # T√≠tulo del reporte
            story.append(Paragraph(f"üéØ An√°lisis por Nivel Acad√©mico {level}", self.styles['AndruTitle']))
            story.append(Spacer(1, 15))
            
            # Contexto del nivel
            story.append(Paragraph(f"üìö An√°lisis Espec√≠fico - Nivel {level}", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            
            context_text = f"Este reporte presenta el an√°lisis espec√≠fico de {len(df_filtered)} RdAs correspondientes al nivel acad√©mico {level}."
            story.append(Paragraph(context_text, self.styles['AndruBody']))
            story.append(Spacer(1, 15))
            
            # M√©tricas del nivel
            story.append(self._create_metrics_summary(df_filtered))
            story.append(Spacer(1, 20))
            
            # Tabla detallada del nivel
            story.append(Paragraph("üìã RdAs del Nivel", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            story.append(self._create_detailed_table(df_filtered))
            story.append(Spacer(1, 20))
            
            # Distribuci√≥n Bloom del nivel
            story.append(Paragraph("üß† Distribuci√≥n Bloom del Nivel", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            story.append(self._create_bloom_distribution(df_filtered))
            story.append(Spacer(1, 20))
            
            # Recomendaciones espec√≠ficas del nivel
            story.append(Paragraph(f"üí° Recomendaciones para Nivel {level}", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            recommendations = self._create_recommendations(df_filtered)
            for rec in recommendations:
                story.append(Paragraph(rec, self.styles['AndruBody']))
                story.append(Spacer(1, 5))
            
            story.append(Spacer(1, 30))
            story.append(self._create_footer())
            
            doc.build(story)
            buffer.seek(0)
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Error generando PDF por nivel: {e}")
            raise
    
    def generate_complete_pdf(self, df):
        """Genera PDF completo con todos los an√°lisis"""
        try:
            buffer = BytesIO()
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=AndruPageConfig.MARGIN_RIGHT,
                leftMargin=AndruPageConfig.MARGIN_LEFT,
                topMargin=AndruPageConfig.MARGIN_TOP,
                bottomMargin=AndruPageConfig.MARGIN_BOTTOM
            )
            
            story = []
            
            # Encabezado
            story.append(self._create_header())
            story.append(Spacer(1, 20))
            
            # T√≠tulo del reporte
            story.append(Paragraph("üìã Reporte Integral Completo", self.styles['AndruTitle']))
            story.append(Spacer(1, 15))
            
            # Resumen ejecutivo
            story.append(Paragraph("üéØ Resumen Ejecutivo", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            
            total = len(df)
            apropiados = len(df[df['Adecuaci√≥n T.'].str.contains('Apropiado', na=False)])
            
            executive_summary = f"""
            <b>An√°lisis Integral de Resultados de Aprendizaje</b><br/><br/>
            Se realiz√≥ un an√°lisis comprehensivo de <b>{total}</b> Resultados de Aprendizaje utilizando 
            t√©cnicas avanzadas de Procesamiento de Lenguaje Natural e Inteligencia Artificial.<br/><br/>
            <b>Hallazgos Principales:</b><br/>
            ‚Ä¢ {apropiados/total*100:.1f}% de adecuaci√≥n apropiada seg√∫n Taxonom√≠a de Bloom<br/>
            ‚Ä¢ An√°lisis multidimensional: Verificabilidad, Correcci√≥n y Autenticidad<br/>
            ‚Ä¢ Recomendaciones inteligentes para mejora continua
            """
            
            story.append(Paragraph(executive_summary, self.styles['AndruBody']))
            story.append(Spacer(1, 20))
            
            # M√©tricas generales
            story.append(Paragraph("üìä M√©tricas Generales", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            story.append(self._create_metrics_summary(df))
            story.append(PageBreak())
            
            # An√°lisis detallado
            story.append(Paragraph("üìã An√°lisis Detallado", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            story.append(self._create_detailed_table(df))
            story.append(Spacer(1, 20))
            
            # Distribuci√≥n Bloom
            story.append(Paragraph("üß† An√°lisis de Taxonom√≠a de Bloom", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            story.append(self._create_bloom_distribution(df))
            story.append(Spacer(1, 20))
            
            # An√°lisis por nivel acad√©mico
            levels = df['Nivel Acad√©mico'].unique()
            for level in sorted(levels):
                df_level = df[df['Nivel Acad√©mico'] == level]
                story.append(Paragraph(f"üìö An√°lisis Nivel {level}", self.styles['AndruSubtitle']))
                story.append(Spacer(1, 10))
                
                level_summary = f"Nivel {level}: {len(df_level)} RdAs analizados"
                story.append(Paragraph(level_summary, self.styles['AndruBody']))
                story.append(Spacer(1, 10))
                
                story.append(self._create_detailed_table(df_level))
                story.append(Spacer(1, 15))
            
            # Recomendaciones finales
            story.append(Paragraph("üöÄ Recomendaciones Integrales", self.styles['AndruSubtitle']))
            story.append(Spacer(1, 10))
            recommendations = self._create_recommendations(df)
            for rec in recommendations:
                story.append(Paragraph(rec, self.styles['AndruBody']))
                story.append(Spacer(1, 5))
            
            story.append(Spacer(1, 30))
            story.append(self._create_footer())
            
            doc.build(story)
            buffer.seek(0)
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Error generando PDF completo: {e}")
            raise

# ============================================================================
# FUNCIONES DE INTERFAZ P√öBLICA
# ============================================================================

def generate_detailed_pdf(df):
    """Funci√≥n p√∫blica para generar PDF detallado"""
    generator = AndruPDFGenerator()
    return generator.generate_detailed_pdf(df)

def generate_executive_pdf(df):
    """Funci√≥n p√∫blica para generar PDF ejecutivo"""
    generator = AndruPDFGenerator()
    return generator.generate_executive_pdf(df)

def generate_level_pdf(df, level):
    """Funci√≥n p√∫blica para generar PDF por nivel"""
    generator = AndruPDFGenerator()
    return generator.generate_level_pdf(df, level)

def generate_complete_pdf(df):
    """Funci√≥n p√∫blica para generar PDF completo"""
    generator = AndruPDFGenerator()
    return generator.generate_complete_pdf(df)